% ------------------------------------------------------------------------
% Calculate the surface temperature and melt based on the Newton-Raphson
% and Crank-Nicholson method and surface energy balance modelling
% ------------------------------------------------------------------------

% pert = 0;
 
% Debris properties
rhor = 2600;                 % Density of debris (kg m-3) from Bozhinskiy et al. 1986
cR = 1260;                   % Specific heat capacity of debris (J kg-1 K-1) from Bozhinskiy et al. 1986
phi_deb = 0.43;              % Debris porosity from Bozhinskiy et al. 1986
albdeb = 0.10;               % Debris albedo from Bozhinskiy et al. 1986
k_r = 2.8;                   % Debris whole rock thermal conductivity (W K-1 m-1) from Bozhinskiy et al. 1986
C_ex_deb = 0.004;            % Exchange coefficient turbulent fluxes debris
hd_crit = 0.03;              % Characteristic snow thickness debris (m w.e.)
phi_low = 0.10;              % Porosity of lowest debris layer
em_d = 0.90;                 % Surface emissivity debris
em_d_dry = em_d;
em_d_wet = em_d;

%% Initialize 

i = 1;

% Moisture
start_moist = 0;        % 0 = no, 1 = yes
deg_sat = 2;
if start_moist >= 1     % 0 = dry, 1 = partially saturated (bottom layer), 2 = saturated, 3 = simplifiied percolation scheme
    deg_sat = 2;
end
t_tune = 500;
tau_min = 1;
tau_max = 1000;

% Rain
start_rain = 1;
evap_parameter = 1;

% Sensible heat
start_qsh = 0;
y_grad = 10;        % Exponential decay of within-debris wind speed with depth

yearly_tempsfc_deb = zeros(tmax,no_gridpointsx,no_gridpointsy);
yearly_psi_deb = zeros(tmax,no_gridpointsx,no_gridpointsy);
yearly_lnet_deb = zeros(tmax,no_gridpointsx,no_gridpointsy);
yearly_shf_deb = zeros(tmax,no_gridpointsx,no_gridpointsy);
yearly_lhf_deb = zeros(tmax,no_gridpointsx,no_gridpointsy);
yearly_qnet_deb = zeros(tmax,no_gridpointsx,no_gridpointsy);
yearly_qin_deb = zeros(tmax,no_gridpointsx,no_gridpointsy);
yearly_albedo_deb = zeros(tmax,no_gridpointsx,no_gridpointsy);
yearly_u_deb = zeros(tmax,no_gridpointsx,no_gridpointsy);
yearly_p = zeros(tmax,no_gridpointsx,no_gridpointsy);
yearly_dsnow_deb = zeros(tmax,no_gridpointsx,no_gridpointsy);
yearly_qc_deb = zeros(tmax,no_gridpointsx,no_gridpointsy);
yearly_runoff_deb = zeros(tmax,no_gridpointsx,no_gridpointsy);
yearly_meltsnow_deb = zeros(tmax,no_gridpointsx,no_gridpointsy);
yearly_Wsnow_deb = zeros(tmax,no_gridpointsx,no_gridpointsy);
yearly_w_deb = zeros(tmax,no_gridpointsx,no_gridpointsy);
yearly_meltice_deb = zeros(tmax,no_gridpointsx,no_gridpointsy);
yearly_tsnow_deb = zeros(tmax,no_gridpointsx,no_gridpointsy);
yearly_ez_saturated_deb = zeros(tmax,no_gridpointsx,no_gridpointsy);
yearly_es_saturated_deb = zeros(tmax,no_gridpointsx,no_gridpointsy);
yearly_ez_deb = zeros(tmax,no_gridpointsx,no_gridpointsy);
yearly_es_deb = zeros(tmax,no_gridpointsx,no_gridpointsy);
yearly_qz_deb = zeros(tmax,no_gridpointsx,no_gridpointsy);
yearly_qs_deb = zeros(tmax,no_gridpointsx,no_gridpointsy);
yearly_rh = zeros(tmax,no_gridpointsx,no_gridpointsy);
yearly_ta_deb = zeros(tmax,no_gridpointsx,no_gridpointsy);
yearly_tau_deb = zeros(tmax,no_gridpointsx,no_gridpointsy);
yearly_lout_deb = zeros(tmax,no_gridpointsx,no_gridpointsy);
yearly_deb_deb = zeros(tmax,no_gridpointsx,no_gridpointsy);
yearly_qm_deb = zeros(tmax,no_gridpointsx,no_gridpointsy);
yearly_qrain_deb = zeros(tmax,no_gridpointsx,no_gridpointsy);
yearly_massbal_deb_ice = zeros(tmax,no_gridpointsx,no_gridpointsy);
yearly_within_debris_wind = zeros(tmax,no_gridpointsx,no_gridpointsy);
yearly_fract_cov = zeros(no_gridpointsx,no_gridpointsy);
yearly_qrain_sfc_deb = zeros(tmax,no_gridpointsx,no_gridpointsy);
yearly_qrain_temp_deb = zeros(tmax,no_gridpointsx,no_gridpointsy);
yearly_qshf_temp_deb = zeros(tmax,no_gridpointsx,no_gridpointsy);
yearly_wind_at_ice_deb = zeros(tmax,no_gridpointsx,no_gridpointsy);
yearly_water_at_ice_deb = zeros(tmax,no_gridpointsx,no_gridpointsy);
yearly_water_vol_deb = zeros(tmax,no_gridpointsx,no_gridpointsy);
yearly_water_totvol_deb = zeros(tmax,no_gridpointsx,no_gridpointsy);
yearly_lin_deb = zeros(tmax,no_gridpointsx,no_gridpointsy);
t_tresh = 2.0;                                       

%% Start the loop to determine snow cover evolution

for n = 1:no_gridpointsx
    for l = 1:no_gridpointsy
        
        if mask(n,l) < 2    % If no debris, surface temperature and SMB is NaN
            
            yearly_deb_deb(i,n,l) = NaN;
            yearly_runoff_deb(i,n,l) = NaN;
            yearly_massbal_deb_ice(i,n,l) = NaN;
            
        else

            %% Initialization variables
            
            temp_data_deb = temp_glacier(:,n,l)+pert;
            temp_deb = temp_data_deb+273.15;
            prec_deb = prec_glacier(:,n,l);
            solarslopingsfc_deb = solarslopingsfc(:,n,l);
            solid_prec_glacier_deb = solid_prec_glacier(:,n,l);
            yearly_melt_clean_ice = yearly_meltice_tsfc(:,n,l);
            lw_in_deb = lw_in(:,n,l);
            u_deb = u(:,n,l);
            u_AWS_deb = u_d(:,n,l);
            p_deb = P(:,n,l);
            tau_deb = tau_glacier(:,n,l);
            rh_deb = (max(0,rh_AWS));
            w = 0;
            tsnow_sfc = 0;
%             fract_cov = fract_deb(n,l);
%             fract_cov = exp(-10*debris_thickness);
            fract_cov = 1;

            %% Initialization loop

            Td = zeros(1, tmax);
            Ts_past = zeros(1, tmax);
            n_iterations = zeros(1, tmax);
            
            Qnet_deb = zeros(1, tmax);
            Lnet_deb = zeros(1, tmax);
            Lout_deb = zeros(1, tmax);
            SHF_deb = zeros(1, tmax);
            LHF_deb = zeros(1, tmax);
            Qrain_sfc_deb = zeros(1, tmax);
            F_deb = zeros(1, tmax);
            
            dQnet_deb = zeros(1, tmax);
            dLnet_deb = zeros(1, tmax);
            dSHF_deb = zeros(1, tmax);
            dLHF_deb = zeros(1, tmax);
            dQrain_sfc_deb = zeros(1, tmax);
            dF_deb = zeros(1, tmax);
            em_d_deb = zeros(1, tmax);
            
            eS_saturated = zeros(1, tmax);
            eZ_saturated = zeros(1, tmax);
            eS = zeros(1, tmax);
            eZ = zeros(1, tmax);
            qS = zeros(1, tmax);
            qZ = zeros(1, tmax);
            tdsnow_deb = zeros(1, tmax);
            dsnow_deb = zeros(1, tmax);
            
            % Compute height of each layer
            
            debris_thickness = th_deb(n,l)./100;
%             debris_thickness = 1.5;
            h = debris_thickness / 10;
            
            % Compute various information needed 
            
            N = debris_thickness/h + 1;
            N_iterations = 0;                   % Set iterations to vary debris thickness
            debris_depth = zeros(N, tmax);      % Debris depth
            phi_deb2 = zeros(N, tmax);          % Debris porosity

            % Initialization
            
            a_Crank = zeros(N,tmax);
            b_Crank = zeros(N,tmax);
            c_Crank = zeros(N,tmax);
            d_Crank = zeros(N,tmax);
            A_Crank = zeros(N,tmax);
            S_Crank = zeros(N,tmax);
            
            Qc_deb = zeros(1, tmax);
            dQc_deb = zeros(1, tmax);
            Qm_ice = zeros(1, tmax);
            Q_rain_deb = zeros(N, tmax);
            Q_meltwater_deb = zeros(N, tmax);
            Q_rain_temp_deb = zeros(N, tmax);
            
            wd_deb = zeros(N,tmax);
            wd_deb_max = zeros(N,tmax);
            wd_diff_deb_pack = zeros(N,tmax);
            wd_deb_vol = zeros(N,tmax);
            wd_deb_tot_vol = zeros(1,tmax);
            vol_heat_cap_deb = zeros(N,tmax);
            k_eff_deb = zeros(N,tmax);
            C_deb = zeros(N,tmax);
            tau_j = zeros(N,tmax);
            tau_j_t = zeros(N,tmax);
            wd_deb_horz_runoff2 = zeros(N,tmax);
            wi = zeros(N,tmax);
            advz = zeros(N,tmax);
            t_change = zeros(N,tmax);
            t_change_shf = zeros(N,tmax);
            Q_rain_LWS = zeros(N,tmax);
            debris_wind_speed = zeros(N,tmax);
            SHF_within_deb = zeros(N,tmax);
            yearly_instability_rain_deb = zeros(N,tmax);
            
            wd_deb_horz_runoff = zeros(1, tmax);
            wd_deb_moisture_input_top = zeros(1, tmax);
            wd_deb_moisture_input_bot = zeros(1, tmax);
            wd_total = zeros(1, tmax);
            wd_deb_diff_bot = zeros(1, tmax);
            wd_deb_bot_runoff = zeros(1, tmax);
            wd_deb_diff_top = zeros(1, tmax);
            wd_deb_top_runoff = zeros(1, tmax);
            wd_sat_deb_runoff_top = zeros(1, tmax);

            % Note notation in loop: "i-1" refers to the past

                %% Surface temperature and surface energy fluxes calculation  
                  
                for i = 1:tmax
                    
                    debris_depth(2:N-1,i) = linspace(0,debris_thickness,N-2);
                    phi_deb2(2:N-1,i) = max(0,linspace(phi_deb,phi_low,N-2));
                    debris_wind_speed(1,i) = u_AWS_deb(i);
                    debris_wind_speed(2:N-1,i) = (u_AWS_deb(i)*sqrt(C_ex_deb))*exp(-y_grad*(debris_depth(2:N-1,i)));

                    if i == 1
                        dsnow_deb(i) = 1e-50;    % Artificial infinitesimally small snow depth for first time step
                        solid_prec_glacier_deb(i) = 1e-50;
                    end
                    
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% IN THE CASE SNOW IS PRESENT %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

                   if dsnow_deb(i) > 0
        
                   n_iterations(i) = 0; % Set iterations to vary surface temperature
                   Ts_past(i) = 0;
                       
                   % Initially assume Ts = temp, for all other time steps assume it's equal to previous Ts
                   if i == 1
                      Td(1,i) = temp_deb(i);
                   else
                      Td(1,i) = Td(1,i-1);
                   end
                    
                   if Td(1,i) > 273.15 
                       Td(1,i) = 273.15; % Correct for maximum of melting surface (0 degrees C)
                   end
                 
                   % Compute fluxes normally
        
                   T_diff(i)=(temp_deb(i)-Td(1,i));
                   
                   % Albedo
                   
                   dstar_d = debris_thickness + dstar_i;
                   if dstar_d > hd_crit
                       dstar_d = hd_crit + dstar_i;
                   end
                   
                   if i == 1
                       alb_deb(i) = albsnow+(albdeb-albsnow).*exp(-dsnow_deb(i)./dstar_d);
                   elseif i >= 2
                      tsnow_sfc(i) = -1.*(find(solid_prec_glacier_deb(1:i)>0,1,'last')-i);
                      albsnow_deb(i) = albfirn+(albsnow-albfirn).*exp(-tsnow_sfc(i)./tsnow);
                      alb_deb(i) = albsnow_deb(i)+(albdeb-albsnow_deb(i)).*exp(-dsnow_deb(i)./dstar_d);
                   end
                   
                   % Surface fluxes
        
                   Qnet_deb(i) = tau_deb(i).*(1-alb_deb(i)).*solarslopingsfc_deb(i);
                   
                   Lout_deb(i) = em_s.*(stf_bltz.*Td(1,i).^4);
                   Lnet_deb(i) = lw_in_deb(i) - Lout_deb(i);
                   
                   SHF_deb(i) = rhoa.*cA.*(C_ex_ice).*u_deb(i).*T_diff(i);
                   
                   if temp_deb(i) > 273.15
                        eS_saturated(i) = 611.*exp(-Lv./R2.*(1./Td(1,i)-1/273.15));
                        eZ_saturated(i) = 611.*exp(-Lv./R2.*(1./(temp_deb(i))-1/273.15));
                        eS(i) = eS_saturated(i);
                        eZ(i) = ((rh_deb(i)./100)*eZ_saturated(i));
                        qS(i) = (mwratio).*(eS(i)./p_deb(i));
                        qZ(i) = (mwratio).*(eZ(i)./p_deb(i));
                        LHF_deb(i) = rhoa.*Lv.*(C_ex_ice).*u_deb(i).*(qZ(i)-qS(i));
                  else
                        eS_saturated(i) = 0;
                        LHF_deb(i) = 0;
                        eZ_saturated(i) = 0;
                        eS(i) = 0;
                        eZ(i) = 0;
                        qS(i) = 0;
                        qZ(i) = 0;
                   end

                   if prec_deb(i) > 0 && solid_prec_glacier_deb(i) == 0;% && dsnow_deb(i) == 0
                       Qrain_sfc_deb(i) = cW.*rhow.*(prec_deb(i)./(sechr)).*(temp_data_deb(i));
                   end
                   
                   F_deb(i) = Qnet_deb(i) + Lnet_deb(i) + SHF_deb(i) + LHF_deb(i) + Qrain_sfc_deb(i);
        
                   % Calculate derivative of fluxes w.r.t surface temperature
        
                   dQnet_deb(i) = 0;
                   
                   dLnet_deb(i) = -4.*em_s.*(stf_bltz).*Td(1,i).^3;
                   
                   dSHF_deb(i) = -1.*rhoa.*cA.*(C_ex_ice).*u_deb(i);
                   
                   if temp_deb(i) > 273.15
                        dLHF_deb(i) = -1.*rhoa.*Lv.*(C_ex_ice).*u_deb(i).*((611.*exp(-Lv./R2.*(1./Td(1,i)-1./273.15)).*(Lv./R2.*Td(1,i).^-2)).*(mwratio/(p_deb(i))));
                   else
                        dLHF_deb(i) = 0;
                   end

                   if prec_deb(i) > 0 && solid_prec_glacier_deb(i) == 0;% && dsnow_deb(i) == 0
                       dQrain_sfc_deb(i) = -cW.*rhow.*(prec_deb(i)./(sechr));
                   end
                   
                   dF_deb(i) = dQnet_deb(i) + dLnet_deb(i) + dSHF_deb(i) + dLHF_deb(i) + dQrain_sfc_deb(i);
        
                   % Newton-Raphson method to solve for surface temperature
        
                   while abs(Td(1,i)-Ts_past(i)) > 0.01 & n_iterations < 100
            
                     n_iterations(i) = n_iterations(i) + 1;
                     Ts_past(i) = Td(1,i);
                     Td(1,i) = Ts_past(i) - F_deb(i)/dF_deb(i); 
                                             
                     if (Td(1,i) - Ts_past(i)) > 1 % Max step size is 1 degree C
                         Td(1,i) = Ts_past(i) + 1;
                     elseif (Td(1,i) - Ts_past(i)) < -1
                         Td(1,i) = Ts_past(i) - 1;
                     end
                     
                     if Td(1,i) > 273.15 
                         Td(1,i) = 273.15; % Correct for maximum of melting surface (0 degrees C)
                     end
                        
                     % Compute fluxes normally
            
                     T_diff(i)=(temp_deb(i)-Td(1,i));
                     
                     % Albedo
                     
                     dstar_d = debris_thickness + dstar_i;
                     if dstar_d > hd_crit
                         dstar_d = hd_crit + dstar_i;
                     end
                     
                     if i == 1
                         alb_deb(i) = albsnow+(albdeb-albsnow).*exp(-dsnow_deb(i)./dstar_d);
                     elseif i >= 2
                        tsnow_sfc(i) = -1.*(find(solid_prec_glacier_deb(1:i)>0,1,'last')-i);
                        albsnow_deb(i) = albfirn+(albsnow-albfirn).*exp(-tsnow_sfc(i)./tsnow);
                        alb_deb(i) = albsnow_deb(i)+(albdeb-albsnow_deb(i)).*exp(-dsnow_deb(i)./dstar_d);
                     end
                     
                     % Surface fluxes
            
                     Qnet_deb(i) = tau_deb(i).*(1-alb_deb(i)).*solarslopingsfc_deb(i);
                     
                     Lout_deb(i) = em_s.*(stf_bltz.*Td(1,i).^4);
                     Lnet_deb(i) = lw_in_deb(i) - Lout_deb(i);
                     
                     SHF_deb(i) = rhoa.*cA.*(C_ex_ice).*u_deb(i).*T_diff(i);
                     
                     if temp_deb(i) > 273.15
                        eS_saturated(i) = 611.*exp(-Lv./R2.*(1./Td(1,i)-1/273.15));
                        eZ_saturated(i) = 611.*exp(-Lv./R2.*(1./(temp_deb(i))-1/273.15));
                        eS(i) = eS_saturated(i);
                        eZ(i) = ((rh_deb(i)./100)*eZ_saturated(i));
                        qS(i) = (mwratio).*(eS(i)./p_deb(i));
                        qZ(i) = (mwratio).*(eZ(i)./p_deb(i));
                        LHF_deb(i) = Lv.*rhoa.*(C_ex_ice).*u_deb(i).*(qZ(i)-qS(i));
                     else
                        eS_saturated(i) = 0;
                        LHF_deb(i) = 0;
                        eZ_saturated(i) = 0;
                        eS(i) = 0;
                        eZ(i) = 0;
                        qS(i) = 0;
                        qZ(i) = 0;
                     end
                     
                     if prec_deb(i) > 0 && solid_prec_glacier_deb(i) == 0;% && dsnow_deb(i) == 0
                         Qrain_sfc_deb(i) = cW.*rhow.*(prec_deb(i)./(sechr)).*(temp_data_deb(i));
                     end
                   
                     F_deb(i) = Qnet_deb(i) + Lnet_deb(i) + SHF_deb(i) + LHF_deb(i) + Qrain_sfc_deb(i);
        
                     % Calculate derivative of fluxes w.r.t surface temperature
                    
                     dQnet_deb(i) = 0;
                     
                     dLnet_deb(i) = -4.*em_s.*(stf_bltz).*Td(1,i).^3;
                     
                     dSHF_deb(i) = -1.*rhoa.*cA.*(C_ex_ice).*u_deb(i);
                     
                     if temp_deb(i) > 273.15
                        dLHF_deb(i) = -1.*rhoa.*Lv.*(C_ex_ice).*u_deb(i).*((611.*exp(-Lv./R2.*(1./Td(1,i)-1./273.15)).*(Lv./R2.*Td(1,i).^-2)).*(mwratio/(p_deb(i))));
                     else
                        dLHF_deb(i) = 0;
                     end
                     
                     if prec_deb(i) > 0 && solid_prec_glacier_deb(i) == 0;% && dsnow_deb(i) == 0
                         dQrain_sfc_deb(i) = -cW.*rhow.*(prec_deb(i)./(sechr));
                     end
                   
                     dF_deb(i) = dQnet_deb(i) + dLnet_deb(i) + dSHF_deb(i) + dLHF_deb(i) + dQrain_sfc_deb(i);
          
                     % Set maximum iterations to 100
                     
                     if n_iterations == 100 
                         Td(1,i) = (Td(1,i) + Ts_past(i)) / 2;
                     end

                   end

                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% IN THE CASE SNOW IS ABSENT %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

                   elseif dsnow_deb(i) == 0
                      
                    n_iterations(i) = 0; % Set iterations to vary surface temperature
                    Ts_past(i) = 0;
                    Td(N,i) = 273.15; % Ice temperature is 0 degrees C
                        
                  % Initially assume Ts = temp_deb, for all other time steps assume it's equal to previous Ts
                     if i == tdsnow_deb(i-1)+1
                        Td(1,i) = temp_deb(i);
                     else
                        Td(1,i) = Td(1,i-1);
                     end

                   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%% HEAT DIFFUSION BY CONDIUCTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
         
                  % Calculate temperature profile in the debris
                     if i == tdsnow_deb(i-1)+1 % For t = 0, which is i = 1, assume initial condition of linear temperature profile in the debris
            
                          Td_gradient = (Td(1,i) - Td(N,i))/debris_thickness;
            
                         for j = 2:1:(N-1)
                            Td(j,i) = Td(1,i) - (j*h)*Td_gradient;
                         end
                
                     else % Perform Crank-Nicholson Scheme
            
                           for j = 2:1:(N-1) % Equation A8 in Reid and Brock (2010)
                               
                             vol_heat_cap_deb(j,i) = rhor.*cR.*(1-phi_deb2(j,i))+(rhow.*cW.*(wd_deb_vol(j,i)) + rhoa.*cA.*(1-wd_deb_vol(j,i))).*(phi_deb2(j,i));
                             k_eff_deb(j,i) = k_r.*(1-phi_deb2(j,i))+(k_w.*(wd_deb_vol(j,i)) + k_a.*(1-wd_deb_vol(j,i))).*(phi_deb2(j,i));
                             C_deb(j,i) = k_eff_deb(j,i)*sechr/(2*(vol_heat_cap_deb(j,i))*h^2);
                    
                             a_Crank(j,i) = C_deb(j,i);
                             b_Crank(j,i) = 2*C_deb(j,i)+1;
                             c_Crank(j,i) = C_deb(j,i);
                    
                             if j == 2 % Equation A9 in Reid and Brock (2010)
                                d_Crank(j,i) = C_deb(j,i)*Td(1,i) + C_deb(j,i)*Td(1,i-1) + (1-2*C_deb(j,i))*Td(j,i-1) + C_deb(j,i)*Td(j+1,i-1);
                             elseif j < (N-1)
                                d_Crank(j,i) = C_deb(j,i)*Td(j-1,i-1) + (1-2*C_deb(j,i))*Td(j,i-1) + C_deb(j,i)*Td(j+1,i-1);
                             elseif j == (N-1)
                                d_Crank(j,i) = 2*C_deb(j,i)*Td(N,i) + C_deb(j,i)*Td(N-2,i-1) + (1-2*C_deb(j,i))*Td(N-1,i-1);
                             end
                                        
                             if j == 2 % Equations A10 and A11 in Reid and Brock (2010)
                                A_Crank(j,i) = b_Crank(j,i);
                                S_Crank(j,i) = d_Crank(j,i);
                             else 
                                A_Crank(j,i) = b_Crank(j,i) - a_Crank(j,i)/A_Crank(j-1,i)*c_Crank(j-1,i);
                                S_Crank(j,i) = d_Crank(j,i) + a_Crank(j,i)/A_Crank(j-1,i)*S_Crank(j-1,i);
                             end
                    
                           end
                
                           for j = N-1:-1:2 % Equation A12 in Reid and Brock (2010)
                    
                                if j == (N-1)
                                    Td(j,i) = S_Crank(j,i)/A_Crank(j,i);
                                else
                                    Td(j,i) = 1/A_Crank(j,i)*(S_Crank(j,i)+c_Crank(j,i)*Td(j+1,i));
                                end
                    
                           end
                     end
        
                   % Assume snow-free surface and compute fluxes normally
        
                   T_diff(i)=(temp_deb(i)-Td(1,i));
                 
                   if i == 1
                      alb_deb(i) = albsnow+(albdeb-albsnow).*exp(-dsnow_deb(i)./dstar_d);
                      solid_prec_glacier_deb(i) = 1e-50;
                   elseif i >= 2
                     tsnow_sfc(i) = -1.*(find(solid_prec_glacier_deb(1:i)>0,1,'last')-i);
                     albsnow_deb(i) = albfirn+(albsnow-albfirn).*exp(-tsnow_sfc(i)./tsnow);
                     alb_deb(i) = albsnow_deb(i)+(albdeb-albsnow_deb(i)).*exp(-dsnow_deb(i)./dstar_d);
                   end
          
                   Qnet_deb(i) = tau_deb(i).*(1-alb_deb(i)).*solarslopingsfc_deb(i);
                   
                   if prec_deb(i) > 0
                       em_d_deb(i) = em_d_wet;
                   elseif prec_deb(i) == 0
                       em_d_deb(i) = em_d_dry;
                   end
                   Lout_deb(i) = em_d_deb(i).*(stf_bltz.*Td(1,i).^4);
                   Lnet_deb(i) = lw_in_deb(i) - Lout_deb(i);
                   
                   SHF_deb(i) = rhoa.*cA.*(C_ex_deb).*u_AWS_deb(i).*T_diff(i);
                 
                   if start_moist == 0 || deg_sat == 0
                    if prec_deb(i) > 0 && dsnow_deb(i) == 0 && temp_deb(i) > 273.15+t_tresh && rh_deb(i) > 80
                         eS_saturated(i) = 611.*exp(-Lv./R2.*(1./Td(1,i)-1/273.15));
                         eZ_saturated(i) = 611.*exp(-Lv./R2.*(1./(temp_deb(i))-1/273.15));
                         eS(i) = eS_saturated(i);
                         eZ(i) = ((rh_deb(i)./100)*eZ_saturated(i));
                         qS(i) = (mwratio).*(eS(i)./p_deb(i));
                         qZ(i) = (mwratio).*(eZ(i)./p_deb(i));
                         LHF_deb(i) = Lv.*rhoa.*(C_ex_deb).*u_AWS_deb(i).*(qZ(i)-qS(i));
                    else
                         eS_saturated(i) = 611.*exp(-Lv./R2.*(1./Td(1,i)-1/273.15));
                         eZ_saturated(i) = 611.*exp(-Lv./R2.*(1./(temp_deb(i))-1/273.15));
                         eZ(i) = ((rh_deb(i)./100)*eZ_saturated(i));
                         eS(i) = (eZ(i).*((Td(1,i))./(temp_deb(i))));
                         qS(i) = (mwratio).*(eS(i)./p_deb(i));
                         qZ(i) = (mwratio).*(eZ(i)./p_deb(i));
                         LHF_deb(i) = 0; 
                    end
                   end
                   if start_moist == 1 && deg_sat == 1 || deg_sat == 2 || deg_sat == 3
                    if prec_deb(i) > 0 && dsnow_deb(i) == 0 && temp_deb(i) > 273.15+t_tresh && rh_deb(i) > 80
                         eS_saturated(i) = 611.*exp(-Lv./R2.*(1./Td(1,i)-1/273.15));
                         eZ_saturated(i) = 611.*exp(-Lv./R2.*(1./(temp_deb(i))-1/273.15));
                         eS(i) = eS_saturated(i);
                         eZ(i) = ((rh_deb(i)./100)*eZ_saturated(i));
                         qS(i) = (mwratio).*(eS(i)./p_deb(i));
                         qZ(i) = (mwratio).*(eZ(i)./p_deb(i));
                         LHF_deb(i) = Lv.*rhoa.*(C_ex_deb).*u_AWS_deb(i).*(qZ(i)-qS(i));
                         if qS(i) == 0
                             LHF_deb(i) = 0;
                         end
                    elseif i > 2 && dsnow_deb(i-1) == 0 && Qm_ice(i-1) > 0 || Wsnow(i-1) > 0 || prec_deb(i-1) > 0
                         eS_saturated(i) = 611.*exp(-Lv./R2.*(1./Td(1,i)-1/273.15));
                         eZ_saturated(i) = 611.*exp(-Lv./R2.*(1./(temp_deb(i))-1/273.15));
                         eZ(i) = ((rh_deb(i)./100)*eZ_saturated(i));
                         eS(i) = (eZ(i).*((Td(1,i))./(temp_deb(i)))) + ((eS_saturated(i)-(eZ(i).*((Td(1,i))./(temp_deb(i)))))*(((sum(wd_deb_vol(2:N-1,i))./(N-2)))));
                         qS(i) = (mwratio).*(eS(i)./p_deb(i));
                         qZ(i) = (mwratio).*(eZ(i)./p_deb(i));
                         LHF_deb(i) = Lv.*rhoa.*(C_ex_deb).*u_AWS_deb(i).*(qZ(i)-qS(i));
                         if qS(i) == 0
                             LHF_deb(i) = 0;
                         end
                    end
                   end

                   if prec_deb(i) > 0 && solid_prec_glacier_deb(i) == 0 && dsnow_deb(i) == 0
                        Qrain_sfc_deb(i) = cW.*rhow.*(prec_deb(i)./(sechr)).*(temp_deb(i)-Td(1,i));
                   end

                   Qc_deb(i) = k_eff_deb(2,i)*(Td(2,i) - Td(1,i))/h;
                   F_deb(i) = Qnet_deb(i) + Lnet_deb(i) + SHF_deb(i) + LHF_deb(i) + Qrain_sfc_deb(i) + Qc_deb(i);
        
                   % Calculate derivative of fluxes w.r.t surface temperature
        
                   dQnet_deb(i) = 0;
                   dLnet_deb(i) = -4.*em_d_deb(i).*(stf_bltz).*Td(1,i).^3;
                   dSHF_deb(i) = -1.*rhoa.*cA.*(C_ex_deb).*u_AWS_deb(i);
                   if start_moist == 0 || deg_sat == 0
                    if prec_deb(i) > 0 && dsnow_deb(i) == 0 && temp_deb(i) > 273.15+t_tresh && rh_deb(i) > 80
                         dLHF_deb(i) = -1.*rhoa.*Lv.*(C_ex_deb).*u_AWS_deb(i).*((611.*exp(-Lv./R2.*(1./Td(1,i)-1./273.15)).*(Lv./R2.*Td(1,i).^-2)).*(mwratio/(p_deb(i))));
                    else
                         dLHF_deb(i) = 0;
                    end
                   end
                   if start_moist == 1 && deg_sat == 1 || deg_sat == 2 || deg_sat == 3
                    if prec_deb(i) > 0 && dsnow_deb(i) == 0 && temp_deb(i) > 273.15+t_tresh && rh_deb(i) > 80
                         dLHF_deb(i) = -1.*rhoa.*Lv.*(C_ex_deb).*u_AWS_deb(i).*((611.*exp(-Lv./R2.*(1./Td(1,i)-1./273.15)).*(Lv./R2.*Td(1,i).^-2)).*(mwratio/(p_deb(i))));
                         if qS(i) == 0
                             dLHF_deb(i) = 0;
                         end
                    else i > 2 && dsnow_deb(i-1) == 0 && Qm_ice(i-1) > 0 || Wsnow(i-1) > 0 || prec_deb(i-1) > 0;
                         dLHF_deb(i) = -1.*rhoa.*Lv.*(C_ex_deb).*u_AWS_deb(i).*((611.*exp(-Lv./R2.*(1./Td(1,i)-1./273.15)).*(Lv./R2.*Td(1,i).^-2)).*(mwratio/(p_deb(i))));
                         if qS(i) == 0
                             dLHF_deb(i) = 0;
                         end
                    end
                   end
                   if prec_deb(i) > 0 && solid_prec_glacier_deb(i) == 0 && dsnow_deb(i) == 0
                        dQrain_sfc_deb(i) = -cW.*rhow.*(prec_deb(i)./(sechr));
                   end
                   dQc_deb(i) = -k_eff_deb(2,i)/h;
                   dF_deb(i) = dQnet_deb(i) + dLnet_deb(i) + dSHF_deb(i) + dLHF_deb(i) + dQrain_sfc_deb(i) + dQc_deb(i);
        
                 % Newton-Raphson method to solve for surface temperature
        
                    while abs(Td(1,i)-Ts_past(i)) > 0.01 & n_iterations < 100
            
                     n_iterations(i) = n_iterations(i) + 1;
                     Ts_past(i) = Td(1,i);
                     Td(1,i) = Ts_past(i) - F_deb(i)/dF_deb(i); 
                                 
                     if dsnow_deb(i) > 0
                         Td(1,i) = 273.15; % In case of snow cover, surface temperature is 0 degrees C
                     end
            
                     if (Td(1,i) - Ts_past(i)) > 1 % Max step size is 1 degree C
                         Td(1,i) = Ts_past(i) + 1;
                     elseif (Td(1,i) - Ts_past(i)) < -1
                         Td(1,i) = Ts_past(i) - 1;
                     end
                                 
                     % Calculate temperature profile in the debris
            
                     if i == tdsnow_deb(i-1)+1 % For t = 0, which is i = 1, assume initial condition of linear temperature profile in the debris
                         
                          Td(1,i) = temp_deb(i);
                          Td_gradient = (Td(1,i) - Td(N,i))/debris_thickness;
            
                         for j = 2:1:(N-1)
                            Td(j,i) = Td(1,i) - (j*h)*Td_gradient;
                         end
                
                     else % Perform Crank-Nicholson Scheme
            
                         for j = 2:1:(N-1) % Equation A8 in Reid and Brock (2010)
                    
                             vol_heat_cap_deb(j,i) = rhor.*cR.*(1-phi_deb2(j,i))+(rhow.*cW.*(wd_deb_vol(j,i)) + rhoa.*cA.*(1-wd_deb_vol(j,i))).*(phi_deb2(j,i));
                             k_eff_deb(j,i) = k_r.*(1-phi_deb2(j,i))+(k_w.*(wd_deb_vol(j,i)) + k_a.*(1-wd_deb_vol(j,i))).*(phi_deb2(j,i));
                             C_deb(j,i) = k_eff_deb(j,i)*sechr/(2*(vol_heat_cap_deb(j,i))*h^2);
                    
                             a_Crank(j,i) = C_deb(j,i);
                             b_Crank(j,i) = 2*C_deb(j,i)+1;
                             c_Crank(j,i) = C_deb(j,i);
                    
                             if j == 2 % Equation A9 in Reid and Brock (2010)
                                d_Crank(j,i) = C_deb(j,i)*Td(1,i) + C_deb(j,i)*Td(1,i-1) + (1-2*C_deb(j,i))*Td(j,i-1) + C_deb(j,i)*Td(j+1,i-1);
                             elseif j < (N-1)
                                d_Crank(j,i) = C_deb(j,i)*Td(j-1,i-1) + (1-2*C_deb(j,i))*Td(j,i-1) + C_deb(j,i)*Td(j+1,i-1);
                             elseif j == (N-1)
                                d_Crank(j,i) = 2*C_deb(j,i)*Td(N,i) + C_deb(j,i)*Td(N-2,i-1) + (1-2*C_deb(j,i))*Td(N-1,i-1);
                             end
                    
                             if j == 2 % Equations A10 and A11 in Reid and Brock (2010)
                                  A_Crank(j,i) = b_Crank(j,i);
                                  S_Crank(j,i) = d_Crank(j,i);
                             else 
                                  A_Crank(j,i) = b_Crank(j,i) - a_Crank(j,i)/A_Crank(j-1,i)*c_Crank(j-1,i);
                                  S_Crank(j,i) = d_Crank(j,i) + a_Crank(j,i)/A_Crank(j-1,i)*S_Crank(j-1,i);
                             end
                    
                         end
                
                         for j = N-1:-1:2 % Equation A12 in Reid and Brock (2010)
                    
                             if j == (N-1)
                                 Td(j,i) = S_Crank(j,i)/A_Crank(j,i);
                             else
                                 Td(j,i) = 1/A_Crank(j,i)*(S_Crank(j,i)+c_Crank(j,i)*Td(j+1,i));
                             end
                         end
                     end
            
                     % Assume snow-free surface and compute fluxes normally
            
                     T_diff(i)=(temp_deb(i)-Td(1,i));
                     
                     if i == 1
                         alb_deb(i) = albsnow+(albdeb-albsnow).*exp(-dsnow_deb(i)./dstar_d);
                         solid_prec_glacier_deb(i) = 1e-50;
                     elseif i >= 2
                        tsnow_sfc(i) = -1.*(find(solid_prec_glacier_deb(1:i)>0,1,'last')-i);
                        albsnow_deb(i) = albfirn+(albsnow-albfirn).*exp(-tsnow_sfc(i)./tsnow);
                        alb_deb(i) = albsnow_deb(i)+(albdeb-albsnow_deb(i)).*exp(-dsnow_deb(i)./dstar_d);
                     end
            
                     Qnet_deb(i) = tau_deb(i).*(1-alb_deb(i)).*solarslopingsfc_deb(i);
                     
                     if prec_deb(i) > 0
                         em_d_deb(i) = em_d_wet;
                     elseif prec_deb(i) == 0
                         em_d_deb(i) = em_d_dry;
                     end
                     Lout_deb(i) = em_d_deb(i).*(stf_bltz.*Td(1,i).^4);
                     Lnet_deb(i) = lw_in_deb(i) - Lout_deb(i);
                 
                     SHF_deb(i) = rhoa.*cA.*(C_ex_deb).*u_AWS_deb(i).*T_diff(i);
                     
                     if start_moist == 0 || deg_sat == 0
                      if prec_deb(i) > 0 && dsnow_deb(i) == 0 && temp_deb(i) > 273.15+t_tresh && rh_deb(i) > 80
                         eS_saturated(i) = 611.*exp(-Lv./R2.*(1./Td(1,i)-1/273.15));
                         eZ_saturated(i) = 611.*exp(-Lv./R2.*(1./(temp_deb(i))-1/273.15));
                         eS(i) = eS_saturated(i);
                         eZ(i) = ((rh_deb(i)./100)*eZ_saturated(i));
                         qS(i) = (mwratio).*(eS(i)./p_deb(i));
                         qZ(i) = (mwratio).*(eZ(i)./p_deb(i));
                         LHF_deb(i) = Lv.*rhoa.*(C_ex_deb).*u_AWS_deb(i).*(qZ(i)-qS(i));
                      else
                         eS_saturated(i) = 611.*exp(-Lv./R2.*(1./Td(1,i)-1/273.15));
                         eZ_saturated(i) = 611.*exp(-Lv./R2.*(1./(temp_deb(i))-1/273.15));
                         eZ(i) = ((rh_deb(i)./100)*eZ_saturated(i));
                         eS(i) = (eZ(i).*((Td(1,i))./(temp_deb(i))));
                         qS(i) = (mwratio).*(eS(i)./p_deb(i));
                         qZ(i) = (mwratio).*(eZ(i)./p_deb(i));
                         LHF_deb(i) = 0;
                      end
                     end
                     if start_moist == 1 && deg_sat == 1 || deg_sat == 2 || deg_sat == 3
                      if prec_deb(i) > 0 && dsnow_deb(i) == 0 && temp_deb(i) > 273.15+t_tresh && rh_deb(i) > 80
                         eS_saturated(i) = 611.*exp(-Lv./R2.*(1./Td(1,i)-1/273.15));
                         eZ_saturated(i) = 611.*exp(-Lv./R2.*(1./(temp_deb(i))-1/273.15));
                         eS(i) = eS_saturated(i);
                         eZ(i) = ((rh_deb(i)./100)*eZ_saturated(i));
                         qS(i) = (mwratio).*(eS(i)./p_deb(i));
                         qZ(i) = (mwratio).*(eZ(i)./p_deb(i));
                         LHF_deb(i) = Lv.*rhoa.*(C_ex_deb).*u_AWS_deb(i).*(qZ(i)-qS(i));
                         if qS(i) == 0
                             LHF_deb(i) = 0;
                         end
                      elseif i > 2 && dsnow_deb(i-1) == 0 && Qm_ice(i-1) > 0 || Wsnow(i-1) > 0 || prec_deb(i-1) > 0
                         eS_saturated(i) = 611.*exp(-Lv./R2.*(1./Td(1,i)-1/273.15));
                         eZ_saturated(i) = 611.*exp(-Lv./R2.*(1./(temp_deb(i))-1/273.15));
                         eZ(i) = ((rh_deb(i)./100)*eZ_saturated(i));
                         eS(i) = (eZ(i).*((Td(1,i))./(temp_deb(i)))) + ((eS_saturated(i)-(eZ(i).*((Td(1,i))./(temp_deb(i)))))*(((sum(wd_deb_vol(2:N-1,i))./(N-2)))));
                         qS(i) = (mwratio).*(eS(i)./p_deb(i));
                         qZ(i) = (mwratio).*(eZ(i)./p_deb(i));
                         LHF_deb(i) = Lv.*rhoa.*(C_ex_deb).*u_AWS_deb(i).*(qZ(i)-qS(i)); 
                         if qS(i) == 0
                             LHF_deb(i) = 0;
                         end
                      end
                     end
                     if prec_deb(i) > 0 && solid_prec_glacier_deb(i) == 0 && dsnow_deb(i) == 0
                        Qrain_sfc_deb(i) = cW.*rhow.*(prec_deb(i)./(sechr)).*(temp_deb(i)-Td(1,i));
                     end
                   
                     Qc_deb(i) = k_eff_deb(2,i)*(Td(2,i) - Td(1,i))/h;
                     F_deb(i) = Qnet_deb(i) + Lnet_deb(i) + SHF_deb(i) + LHF_deb(i) + Qrain_sfc_deb(i) + Qc_deb(i);
        
                     % Calculate derivative of fluxes w.r.t surface temperature
                    
                     dQnet_deb(i) = 0;
                     dLnet_deb(i) = -4.*em_d_deb(i).*(stf_bltz).*Td(1,i).^3;
                     dSHF_deb(i) = -1.*rhoa.*cA.*(C_ex_deb).*u_AWS_deb(i);
                     if start_moist == 0 || deg_sat == 0
                      if prec_deb(i) > 0 && dsnow_deb(i) == 0 && temp_deb(i) > 273.15+t_tresh && rh_deb(i) > 80
                         dLHF_deb(i) = -1.*rhoa.*Lv.*(C_ex_deb).*u_AWS_deb(i).*((611.*exp(-Lv./R2.*(1./Td(1,i)-1./273.15)).*(Lv./R2.*Td(1,i).^-2)).*(mwratio/(p_deb(i))));
                      else
                         dLHF_deb(i) = 0;
                      end
                     end
                     if start_moist == 1 && deg_sat == 1 || deg_sat == 2 || deg_sat == 3
                      if prec_deb(i) > 0 && dsnow_deb(i) == 0 && temp_deb(i) > 273.15+t_tresh && rh_deb(i) > 80
                           dLHF_deb(i) = -1.*rhoa.*Lv.*(C_ex_deb).*u_AWS_deb(i).*((611.*exp(-Lv./R2.*(1./Td(1,i)-1./273.15)).*(Lv./R2.*Td(1,i).^-2)).*(mwratio/(p_deb(i))));
                           if qS(i) == 0
                              dLHF_deb(i) = 0;
                           end
                      else i > 2 && dsnow_deb(i-1) == 0 && Qm_ice(i-1) > 0 || Wsnow(i-1) > 0 || prec_deb(i-1) > 0;
                           dLHF_deb(i) = -1.*rhoa.*Lv.*(C_ex_deb).*u_AWS_deb(i).*((611.*exp(-Lv./R2.*(1./Td(1,i)-1./273.15)).*(Lv./R2.*Td(1,i).^-2)).*(mwratio/(p_deb(i))));
                           if qS(i) == 0
                              dLHF_deb(i) = 0;
                           end
                      end
                     end
                     if prec_deb(i) > 0 && solid_prec_glacier_deb(i) == 0 && dsnow_deb(i) == 0
                        dQrain_sfc_deb(i) = -cW.*rhow.*(prec_deb(i)./(sechr));
                     end
                     dQc_deb(i) = -k_eff_deb(2,i)/h;
                     dF_deb(i) = dQnet_deb(i) + dLnet_deb(i) + dSHF_deb(i) + dLHF_deb(i) + dQrain_sfc_deb(i) + dQc_deb(i);
          
                     % Set maximum iterations to 100
                     
                     if n_iterations == 100 
                         Td(1,i) = (Td(1,i) + Ts_past(i)) / 2;
                     end

                    end

                   if start_rain == 1
                     heat_rain;
                   end

                   if start_qsh == 1
                     SHF_within_debris;
                   end

%                    heat_rain2;
                
                   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SUB-DEBRIS ENERGY FOR MELTING %%%%%%%%%%%%%%%%%%%%%%%%%%
                   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        
                    % Calculate energy for melting
                    
                    if start_rain == 1
                        Qm_ice(i) = max(0,(k_eff_deb(N-1,i)*(Td(N-1,i) - Td(N,i))/h) + Q_rain_LWS(N-1,i));% + SHF_within_deb(N-1,i);
                    else
                        Qm_ice(i) = max(0,(k_eff_deb(N-1,i)*(Td(N-1,i) - Td(N,i))/h));
                    end
        
                    if Qm_ice(i) < 0
                        Qm_ice(i) = 0;
                    end

                    % Adjust temperature profile

                    for j = 2:1:(N-1)
                        if start_rain == 1
                         Td(j,i) = Td(j,i) + t_change(j,i);% + t_change_shf(j,i);
                        else
                         Td(j,i) = Td(j,i);
                        end
                    end
                       
                   end
                   
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% MOISTURE WITHIN DEBRIS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                    
                   if start_moist == 1
                       moisture_calc;
                   end
                                                                                                                                 
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SAVE THE VARIABLES %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                        
                 % Save values for the energy balance components

                 yearly_tempsfc_deb(i,n,l) = Td(1,i);
                 yearly_rh(i,n,l) = rh_deb(i);
                 yearly_ta_deb(i,n,l) = temp_deb(i);
                 yearly_qnet_deb(i,n,l) = Qnet_deb(i);
                 yearly_qin_deb(i,n,l) = tau_deb(i).*solarslopingsfc_deb(i);
                 yearly_albedo_deb(i,n,l) = alb_deb(i);
                 yearly_dsnow_deb(i,n,l) = dsnow_deb(i);
                 yearly_lnet_deb(i,n,l) = Lnet_deb(i);
                 yearly_lout_deb(i,n,l) = Lout_deb(i);
                 yearly_lin_deb(i,n,l) = lw_in_deb(i);
                 yearly_shf_deb(i,n,l) = SHF_deb(i);
                 yearly_lhf_deb(i,n,l) = LHF_deb(i);
                 yearly_qrain_sfc_deb(i,n,l) = Qrain_sfc_deb(i);
                 yearly_within_debris_wind(i,n,l) = SHF_within_deb(N-1,i);
                 yearly_psi_deb(i,n,l) = F_deb(i);
                 if dsnow_deb(i) > 0
                     yearly_u_deb(i,n,l) = u_deb(i);
                 elseif dsnow_deb(i) == 0
                     yearly_u_deb(i,n,l) = u_AWS_deb(i);
                 end
                 yearly_p(i,n,l) = p_deb(i);
                 if i > 2
                    yearly_tsnow_deb(i,n,l) = tsnow_sfc(i);
                 end
                 yearly_ez_saturated_deb(i,n,l) = eZ_saturated(i);
                 yearly_es_saturated_deb(i,n,l) = eS_saturated(i);
                 yearly_es_deb(i,n,l) = eS(i);
                 yearly_ez_deb(i,n,l) = eZ(i);
                 yearly_qs_deb(i,n,l) = qS(i);
                 yearly_qz_deb(i,n,l) = qZ(i);
                 yearly_qc_deb(i,n,l) = Qc_deb(i);
                 yearly_wind_at_ice_deb(i,n,l) = debris_wind_speed(N-1,i);
                 yearly_water_at_ice_deb(i,n,l) = wd_deb(N-1,i);
                 yearly_water_vol_deb(i,n,l) = wd_total(i);
                 yearly_water_totvol_deb(i,n,l) = wd_deb_tot_vol(i);
                 if start_rain == 1
                    yearly_qrain_deb(i,n,l) = Q_rain_LWS(N-1,i);
                    yearly_qrain_temp_deb(i,n,l) = t_change(N-1,i);
                 end
                 yearly_qshf_temp_deb(i,n,l) = t_change_shf(N-1,i);
                 if dsnow_deb(i) > 0
                     yearly_qm_deb(i,n,l) = F_deb(i);
                 elseif dsnow_deb(i) == 0
                     yearly_qm_deb(i,n,l) = Qm_ice(i);
                 end
                 
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% MASS BALANCE CALCULATION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                                  
                 % Calculate snow melt
                 
                 if dsnow_deb(i) > 0
                        meltsnow(i) = min(dsnow_deb(i),(max(0,(sechr.*F_deb(i))./(rhow.*lm))));
                        Wsnow(i) = max(0,(w(i)-(ns.*dsnow_deb(i))));
                        w(i+1) = w(i) + meltsnow(i) - Wsnow(i);
                        meltice(i) = 0;
                        runoff(i) = Wsnow(i);
            
                 % In the case of debris-covered ice surface
            
                 elseif dsnow_deb(i) == 0
                       meltice(i) = (fract_cov.*(max(0,(sechr.*Qm_ice(i))./(rhow.*lm)))) + ((1-fract_cov).*yearly_melt_clean_ice(i));
                       Wsnow(i) = 0;
                       w(i+1) = 0;
                       meltsnow(i) = 0;
                       runoff(i) = meltice(i);
                 end
        
                 % Update snow depth
        
                 dsnow_deb(i+1) = dsnow_deb(i) + solid_prec_glacier_deb(i) - meltsnow(i);
                 tdsnow_deb(i) = (find(dsnow_deb(1:i)>0,1,'last'));
                 tdsnow_deb2(i) = -1.*(find(dsnow_deb(1:i)>0,1,'last')-i);
        
                 % Avoid negative snow depth
        
                 if dsnow_deb(i+1) < 0
                      dsnow_deb(i+1) = 0;
                 end
        
                 % Avoid that more water is retained then the retention capacity
        
                 if w(i) > ns.*dsnow_deb(i)
                      w(i) = ns.*dsnow_deb(i);
                 end
        
                 % Calculate final mass balance profile
        
                 massbal(i+1) = massbal(i) + dt*(solid_prec_glacier_deb(i)-runoff(i));
                
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SAVE THE VARIABLES %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                
                 yearly_runoff_deb(i,n,l) = runoff(i);
                 yearly_massbal_deb_ice(i,n,l) = massbal(i);
                 yearly_meltsnow_deb(i,n,l) = meltsnow(i);
                 yearly_Wsnow_deb(i,n,l) = Wsnow(i);
                 yearly_w_deb(i,n,l) = w(i);
                 yearly_meltice_deb(i,n,l) = meltice(i);
                 
                end
                 
        end
    end
end

%% Post-processing

for b = 1:tmax
    for gg = 1:1:no_gridpointsx
        for ll = 1:no_gridpointsy
            if mask(gg,ll) < 2
                yearly_massbal_deb_ice(b,gg,ll) = NaN;
            end
        end
    end
end

Td(Td==0)=273.15;

%% Calculate SMB with fractional debris-covered area

% Fractional clean ice / debris-covered area

% for gg = 1:no_gridpointsx
%     for ll = 1:no_gridpointsy
%         if th_deb(gg,ll) > 0.5 && th_deb(gg,ll) <= 1.5
%             yearly_fract_cov(gg,ll) = 0.95;
%         elseif th_deb(gg,ll) > 1.5
%             yearly_fract_cov(gg,ll) = (1 / (0.962+exp((th_deb(gg,ll)-3.252))));
%         end
%         if mask(gg,ll) < 2
%             yearly_fract_cov(gg,ll) = NaN;
%         end
%     end
% end
% 
% for gg = 1:no_gridpointsx
%     for ll = 1:no_gridpointsy
%             yearly_fract_cov(gg,ll) = 1-((0+1/(1+exp(-((th_deb(gg,ll))+5.538)/1.988))^85.18));
%         if mask(gg,ll) < 2
%             yearly_fract_cov(gg,ll) = NaN;
%         end
%     end
% end
% 
% yearly_massbal_deb_ice2 = squeeze(yearly_massbal_deb_ice(end,:,:));
% yearly_massbal_clean_ice2 = squeeze(yearly_massbal_clean_ice(end,:,:));
% yearly_smb_total = ((1-yearly_fract_cov).*yearly_massbal_deb_ice2)+(yearly_fract_cov.*yearly_massbal_clean_ice2);
% 
% yearly_meltice_deb2 = squeeze(sum(yearly_meltice_deb,1));
% yearly_meltice_tsfc2 = squeeze(sum(yearly_meltice_tsfc,1));
% yearly_mice_total = ((1-yearly_fract_cov).*yearly_meltice_deb2)+(yearly_fract_cov.*yearly_meltice_tsfc2);

%% Plot data

% yearly_deb(yearly_deb>273.15)=273.15;

% yearly_qnet_deb(mask==0)=NaN;
% yearly_lnet_deb(mask==0)=NaN;
% yearly_shf_deb(mask==0)=NaN;
% yearly_lhf_deb(mask==0)=NaN;
% temp_glacier(mask==0)=NaN;
% 
% figure,
% subplot(1,2,1)
% imagesc(squeeze(mean(yearly_deb,1))-273.15),colorbar
% subplot(1,2,2)
% imagesc(squeeze(nanmean(temp_glacier,1))),colorbar
% 
% lw_out_obs = [342.1	325	319	335	393.7	416.2	363.2	338	331.3	324.8	325.1	337.7	415	437.5	370.6	344.3	331.3	318.5	312.3	328.3	391.5	405	347.3	335.5	325.2	319.5	313.1	335.7	396.4	380.6	366.6	340.5	325.5	317.7	313.8	338.4	390	412.5	388	344.3	330.4	319.4	317.4	334	386.4	376.8	356.7	339.3	332	323.7	314.7	338.7	400.3	433	410.5	365.8	343.1	327.8	317.1	341	423.4	451.3	404	365.7	343.1	330.9	324	347.7	405.6	411.3	346.4	332.8	328.3	326.4	325.6	348.1	385.5	419.2	406.5	348.7	329.6	320.8	322	342.5	412.5	452.3	420.3	377.1	348.8	335.6	332.5	352.1	412.6	411.6	396.4	361.4	341.7	338.7	337.6	359.8	418.9	437.6	388.9	360.7	357.2	347.3	350.4	360.9	394.8	392.4	376.7	348.3	340	336.2	336.3	354.6	400.4	402.2	386.4	349.9	340.1	335.8	333.4	338.5	350	362.5	352.6	341	338.7	335.4	334.9	347.5	376.9	374.7	382.5	357.1	351.1	344.9	341.3	358.4	377.7	383	370.6	355.6	340.6	343.3	341.6	353.9	402.7	385.4	356.3	333.4	334.1	335.5	336.7	352	382	404.2	362.3	336.9	333.3	332.4	335.4	355.2	382.5	381.4	370.9	343.6	338.3	333.8	332.6	348	390.4	387.8	359.2	339.3	326.1	324.8	327.1	337.8	388	435.4	379.8	364.2	339.9	331.2	327.2	346.4	397.8	371.5	349.2	340.5	332.4	329.8	325.7	340.7	370.1	386.6	363.6	351.1	339.9	324.9	316.5	346.1	389.1	387.4	388	355.9	342.4	337.9	336	351.4	404.5	408.3	374	344.1	331.3	332.3	331.4	328.2	344.8	347.5	326.3	315.4	312	304.8	302.8	309.7	352.8	354.8	325.8	318	317.3	316.6	317.5	336.5	380.2	371.2	358.7	341.3	319.9	309.3	304.6	325.2	409.6	437.1	408.5	359	346.7	330.7	319.3	335.6	408.7	367.8	346	340.6	331	329.6	326.7	341	387.2	384.8	375	346.7	334.7	325.7	325.1	340.7	407.9	415.3	372.2	345.9	335.9	321	321.9	335	405.4	426.7	384.4	352	330.7	321	316.8	334.4	413.7	446.6	413.3	373.9	350	332.8	333.4	348	416.2	452.1	430.3	380	355	349.3	338.3	350.4	402.1	399.8	364.6	346.1	334.4	331.5	328.2	335.3	361.8	349.4	336.6	323.2	322.4	321.6	313.8	330.1	345.3	387.5	379.5	338.4	311.3	311.5	310.2	315.5	372.7	394	334.3	313.9	307.5	299.5	296	315	384.8	387.2	350.3	330	320.7	316.1	313.5	314.6	315.8	318.4	316.4	311.4	297.2	289.8	283.9	292.3	327.9	351.6	349.7	328.7	314.4	309.8	313.8	332.1	388.4	405.7	369	339.1	323.3	315.4	309.8	328.7	405.3	441.5	399.8	366.3	349	330.1	319.6	331.5	419.6	450.9	409.3	362.3	344.3	337.6	324.8	340.5	411.2	433.9	410.8	361.6	339.9	334.6	340.1	342.7	380.6	382	354.9	345.3	325.4	323.4	322.3	330.9	386.8	419.4	386.9	355.3	332.7	325	318.7	332.3	387.8	399.2	370	342.7	326.2	323	314.1	317.1	369.7	420.4	368.7	319	305.3	293.5	289	294.5	340.4	392.5	357.9	309.2	298.1	292.5	299.3	308.6	323.6	379.2	355.2	316.2	301.8	301.4	300.1	306.4	397	429.2	397	349.2	331.7	325.5	317.6	326.7	416.7	426.1	398.6	359	332.9	332.4	320.3	321.9	409.9	430.7	380.2	353.1	330.6	322.1	312.5	313.8	400.9	430.2	404.2	355.5	326.7	310.4	300.5	309.4	380.6	428.7	390.8	357	327.3	316.6	309.9	312.1	394.3	423.5	409.5	362.2	337.1	320.9	312.3	315.9	405.2	437.2	406.2	362.4	341.4	333.3	319	320.5	410.3	425.4	376.9	349.3	338	327.5	318.3	321.7	399.1	389.3	357.7	342.7	334.4	332.7	331.2	328.8	385.9	357.2	352.4	330.8	323.1	317.4	309.5	315.9	391.6	360.8	346	335.4	328.8	331.6	329.4	347.4	371.6	371.3	351.8	341.5	338.1	336.3	336.2	339.8	333.1	341.3	334.7	324.2	321.6	313.4	310.6	318.4	365.6	381.8	366.4	345.3	332.6	323.7	315.4	319.1	393.7	395.8	380.2	351.2	331.3	324.2	319.9	324.1	393.6	411.8	368.7	336.6	325.7	321.6	320.6	325.7	391.1	387.9	368.1	344.6	329	329.8	327.2	340.6	372.3	376.5	344.7	330.8	322	312.6	308.9	318.4	384.5	418.3	364.3	343	327.1	325	314.6	320.7	368	359.2	351.2	335.7	332.6	332	329.1	332.6	339.8	339.5	331.9	325.9	327.7	325.8	325.6	334.3	349.4	360.4	340.6	329	320.8	319	320.5	332.3	371.8	361	335.4	327.5	323	315.9	316.7	323.2	360.8	353.2	335.2	316.1	314.9	313.7	313.7	319.1	344.3	341.6	329.7	319.1	313.1	301.9	295.4	295.5	364	404.5	355.7	331.3	312	304.1	300.6	302.6	363.5	378.7	365.9	332.9	324.9	316.3	316.1	319.2	315.4	315.3	313.9	313.7	313.5	313.3	313	314	324.8	319.1	323.1	315.4	314.6	315.9	315.2	314.9	322	317.8	315.2	312	310.4	308.3	307.4	310.3	299.8	326.2	318.8	297.7	283.2	280.6	277.6	277.5	337	345.5	350.2	312	299.8	293.8	290.1	291.5	350.3	376.5	346.6	319.1	310.8	302.9	299.8	310.8	346.8	348.3	317.3];
% lw_out_mod = Lout_deb(2185:2887);
% 
% idx_0=find(lw_out_mod>306.167 & lw_out_mod<306.169);
% lw_out_obs(idx_0)=[];
% lw_out_mod(idx_0)=[];
% 
% % lw_out_mod = lw_out_mod+10;
% 
% temp_obs=(lw_out_obs/(em_d*5.67*0.00000001)).^(1/4)-273.15;
% temp_mod=(lw_out_mod/(em_d*5.67*0.00000001)).^(1/4)-273.15;
% 
% y=lw_out_obs;
% yhat=lw_out_mod;
% mean((y - yhat).^2);
% rmse = sqrt(mean((y - yhat).^2));
% rmse;
% 
% clearvars sumrmse rmsevalue n ind_deb ind_nan yearly_runoff
% 
% figure,
% subplot(1,2,1)
% plot(lw_out_obs), hold on, plot(lw_out_mod)
% xlim([0 638])
% grid on, box on, grid minor,
% subplot(1,2,2)
% scatter(lw_out_obs,lw_out_mod,20,'b','filled')
% xlim([250 500])
% ylim([250 500])
% grid on, box on, grid minor,
% p2 = polyfit(lw_out_obs,lw_out_mod,2);
% pred = polyval(p2,lw_out_obs);
% Rsq = 1 - sum((lw_out_mod - pred).^2)/sum((lw_out_mod - mean(lw_out_mod)).^2);
% 
% avg = mean(lw_out_obs(:))-mean(lw_out_mod(:));
% std_deb = std(lw_out_obs(:))-std(lw_out_mod(:));
% mb_deb = yearly_massbal_deb_ice(end,70,117);
% mb_deb = yearly_massbal_deb_ice(end,47,76);
% mb_deb
% [rmse Rsq avg std_deb mb_deb]

% lw_out_obs = transpose(lw_out_obs);
% lw_out_mod = transpose(lw_out_mod);

%%

% acc_th_0_cm=squeeze(solid_prec_glacier(:,n,l));
% acc_th_0_cm = sum(acc_th_0_cm(:));
% meltsnow_th_0_cm=squeeze(yearly_meltsnow_deb(:,n,l));
% meltsnow_th_0_cm = sum(meltsnow_th_0_cm(:));
% meltice_th_0_cm=squeeze(yearly_meltice_deb(:,n,l));
% meltice_th_0_cm = sum(meltice_th_0_cm(:));
% runoff_th_0_cm=squeeze(yearly_runoff_deb(:,n,l));
% runoff_th_0_cm = sum(runoff_th_0_cm(:));
% smb_th_0_cm=yearly_massbal_deb_ice(end,n,l);
% ans2(A,1) = smb_th_0_cm;
% ans2(A,2) = rhor;

% dsnow=mean(dsnow_deb);
% 
% ans2(A,:)=[acc_th_0_cm meltsnow_th_0_cm meltice_th_0_cm runoff_th_0_cm smb_th_0_cm debris_thickness fract_cov];
% mb_clean_ice = yearly_massbal_clean_ice(end,n,l);
% ans2(:,8) = ans2(:,5)./mb_clean_ice;

% if A == S2
%     
%     ind = find(min(abs(ans2(:,5) - mb_clean_ice)) == abs(ans2(:,5) - mb_clean_ice));
%     crit_deb(n,l) = ans2(ind,6)*100;
%     
%     ind = find(max(ans2(:,8)));
%     eff_deb(n,l) = ans2(ind,6)*100;
%     melt_enh_deb(n,l) = ans2(ind,8);
%     
% end

% ans=[acc_th_0_cm meltsnow_th_0_cm meltice_th_0_cm runoff_th_0_cm smb_th_0_cm debris_thickness fract_cov];
% ans(A,:)=[smb_th_0_cm debris_thickness fract_cov];
%%
% 
% subplot(1,3,1)
% scatter(lw_out_obs,lw_out_mod,20,'b','filled')
% xlim([200 500])
% ylim([200 500])
% yticks([200 300 400 500])
% xticks([200 300 400 500])
% grid on, box on, grid minor,
% ylabel('L\uparrow mod (W m^-^2)')
% xlabel('L\uparrow obs (W m^-^2)')
% set(gca,'FontSize',14)
% set(gcf, 'color', 'white')
% 
% daily_val_summer_script = 'Data/daily_values_summerdeb.m';
% run(daily_val_summer_script);
% 
% subplot(1,3,2)
% plot(qnetjja,'Color',[0.9100    0.8100    0.1700],'LineWidth',1.5), hold on
% plot(lnetjja,'b','LineWidth',1.5), hold on
% plot(shfjja,'Color',[135/255,206/255,235/255],'LineWidth',1.5), hold on
% plot(lhfjja,'Color',[2/255,143/255,1/255],'LineWidth',1.5), hold on
% plot(qcjja,'Color',[255/255,51/255,153/255],'LineWidth',1.5), hold on
% grid on
% box on
% grid minor
% ylim([-300 750])
% set(gca,'FontSize',14)
% ylabel('Energy flux (W m^-^2)')
% xlabel('Hour')
% xlim([1 9])
% xticks([1 2 3 4 5 6 7 8 9])
% yticks([-300 -150 0 150 300 450 600 750])
% xticklabels({'0','3','6','9','12','15','18','21','24'})
% leg=legend('S_n_e_t','L_n_e_t','Q_S_H','Q_L_H','Q_C','Location','NorthWest','FontSize',10);
% leg.ItemTokenSize = [10,10];
% set(gcf, 'color', 'white')
% 
% daily_val_summer_script = 'Data/daily_temp_values_summer.m';
% run(daily_val_summer_script);
% 
% subplot(1,3,3)
% plot(tajja,'r','LineWidth',1.5), hold on
% plot(tempsfcjja,'b','LineWidth',1.5),
% xlim([1 9])
% xticks([1 2 3 4 5 6 7 8 9])
% xticklabels({'0','3','6','9','12','15','18','21','24'})
% set(gcf, 'color', 'white')
% grid on, box on, grid minor,
% set(gca,'FontSize',14)
% xlabel('Hour')
% ylabel(['Temperature (' char(176) 'C)'])
% ylim([2 22])
% yticks([2 6 10 14 18 22])
% yyaxis right
% plot(ujja,'k','LineWidth',1.5), hold on
% ylabel(['Wind speed (m s^-^1)'])
% ax = gca;
% ax.YAxis(1).Color = 'k';
% ax.YAxis(2).Color = 'k';
% leg=legend('T_a','T_s','u','Location','NorthWest','FontSize',10);
% leg.ItemTokenSize = [10,10];
% ylim([0.5 4])
% 
% ans2(A,:)=[nanmean(qnetjja(:)) nanmean(lnetjja(:)) nanmean(shfjja(:)) nanmean(lhfjja(:)) nanmean(qcjja(:)) nanmean(qmjja(:))];
% 
clearvars a_C* b_C* c_C* d_C* A_C* S_C* C j SEB T_diff Qnet_deb Lnet_deb ...
    SHF_deb LHF_deb dQnet_deb dLnet_deb dSHF_deb dLHF_deb ...
    dF_deb n_iterations Ts_past eS_saturated eZ_saturated ...
    eS eZ temp_data_deb temp_deb prec_deb solarslopingsfc_deb ...
    lw_in_deb u_deb p_deb tau_deb alb_deb rh_deb alb_deb tau_deb ...
    solid_prec_glacier_debr meltsnow Wsnow w meltice debris_thickness h ...
    Qc_deb_deb Qm_deb dQc_deb_deb Qm_ice N_iterations
% 
% mb_fractcov1 = squeeze(yearly_massbal_deb_ice(end,:,:));
% imagesc(mb_fractcov1),colorbar;

th_deb2=th_deb(:);
fr_deb2=fract_deb(:);
idx=find(isnan(th_deb2));
th_deb2(idx)=[];
fr_deb2(idx)=[];

mb_end2 = squeeze(yearly_massbal_deb_ice(end,70,117));
mb_end2(mb_end2<-10)=NaN;
mb_end2 = mean(mb_end2(:),'omitnan');
